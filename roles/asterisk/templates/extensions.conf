[globals]

{% if h323_upstream_trunking == True %}
;;;;;;;;;;;;;;;;;; H323 TRUNK from EXTERNAL PBX  ;;;;;;;;;;;;;;;;;;;;;;
[{{ h323_trunk_dialplan_context }}]

	{% for host in groups.asterisk_server %}
		{% if host == inventory_hostname %}
; звонок с внешней PBX на внутренние номера:
exten => _{{ loop.index }}XXX,1,NoOp(Входящий звонок с внешней PBX от ${CALLERID(all)} на ${EXTEN})
same = n,GoSub(sub-feature-busy-if-phone-in-use,s,1(${EXTEN}))
same = n,Dial(PJSIP/${EXTEN},60,ktwxU(sub-feature-record-a-call^${EXTEN}^${CALLERID(num)}^"_EXTERNAL_CALL_"))
same = n,Hangup()

		{% elif asterisk_dialplan_allow_forward_ext_to_peers == True %}
; звонок с внешней PBX на номера Asterisk'а '{{ host }}':
exten => _{{ loop.index }}XXX,1,NoOp(Входящий звонок с внешней PBX на транк '{{ host }}'от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(IAX2/asterisk-{{ host }}/${EXTEN})
same = n,Hangup()

		{% endif %}
	{% endfor %}
{% endif %}
{% if sip_upstream_trunking == True %}
;;;;;;;;;;;;;;;;;; SIP TRUNK from EXTERNAL PBX  ;;;;;;;;;;;;;;;;;;;;;;
[{{ sip_trunk_dialplan_context }}]

	{% for host in groups.asterisk_server %}
		{% if host == inventory_hostname %}
; звонок с внешней PBX на внутренние номера:
exten => _{{ loop.index }}XXX,1,NoOp(Входящий звонок с внешней PBX от ${CALLERID(all)} на ${EXTEN})
same = n,GoSub(sub-feature-busy-if-phone-in-use,s,1(${EXTEN}))
same = n,Dial(PJSIP/${EXTEN},60,ktwxU(sub-feature-record-a-call^${EXTEN}^${CALLERID(num)}^"_EXTERNAL_CALL_"))
same = n,Hangup()

		{% elif asterisk_dialplan_allow_forward_ext_to_peers == True %}
; звонок с внешней PBX на номера Asterisk'а '{{ host }}':
exten => _{{ loop.index }}XXX,1,NoOp(Входящий звонок с внешней PBX на транк '{{ host }}'от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(IAX2/asterisk-{{ host }}/${EXTEN})
same = n,Hangup()

		{% endif %}
	{% endfor %}
{% endif %}
;;;;;;;;;;;;;;;;;; from local SIP accounts ;;;;;;;;;;;;;;;;;;;;;
[in-sip-local]

{% if h323_upstream_trunking == True %}
; звонки на экстренные номера незамедлительно маршрутизируются на внешную PBX
exten => 112,1,Dial(OOH323/upstream_pbx/${EXTEN})
exten => 9112,1,Dial(OOH323/upstream_pbx/${EXTEN})

{% endif %}
{% if sip_upstream_trunking == True %}
; звонки на экстренные номера незамедлительно маршрутизируются на внешную PBX
exten => 112,1,Dial(PJSIP/${EXTEN}@upstream_pbx)
exten => 9112,1,Dial(PJSIP/${EXTEN}@upstream_pbx)

{% endif %}
; диапазон номеров функции парковки вызовов
include => parkedcalls

{% for host in groups.asterisk_server %}
	{% if host != inventory_hostname %}
; звонок на номера астериск-транка 'asterisk-{{ host }}':
exten => _{{ loop.index }}XXX,1,NoOp(Звонок от локального абонента абоненту Asterisk '{{ host }}' от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(
		{%- if asterisk_dialplan_allow_mesh_forward_peer_to_peers == True -%}
IAX2/asterisk-{{ groups.asterisk_server | select('ne', inventory_hostname)| join('/${EXTEN}&IAX2/asterisk-')}}/${EXTEN}
		{%- else -%}
IAX2/asterisk-{{ host }}/${EXTEN}
		{%- endif -%}
,,KTWX)
same = n,Hangup()

	{% endif %}
{% endfor %}
; звонок от локального sip-абонента на локальные номера:
exten => _{{ groups.asterisk_server.index(inventory_hostname) + 1 }}XXX,1,NoOp(Локальный звонок от ${CALLERID(all)} на ${EXTEN})
same = n,GoSub(sub-feature-busy-if-phone-in-use,s,1(${EXTEN}))
same = n,Dial(PJSIP/${EXTEN},55,KktTxXwWb(sub-add-sip-header^s^1(Alert-Info^Bellcore-dr2)))
same = n,Hangup()
{% if h323_upstream_trunking == True %}

; набран номер абонента на внешней PBX
exten => _XXXX,1,NoOp(Звонок от локального sip-абонента на номера внешней PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(OOH323/upstream_pbx/${EXTEN},,KTWX)
; набор городского номера:
exten => _[1-7]XXXXX,1,NoOp(Звонок от локального sip-абонента через внешнюю PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(OOH323/upstream_pbx/9${EXTEN},,KTWX)
; набор мобильного номера:
exten => _8XXXXXXXXXX,1,NoOp(Звонок от локального sip-абонента через внешнюю PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(OOH323/upstream_pbx/9${EXTEN},,KTWX)
{% endif %}
{% if sip_upstream_trunking == True %}

; набран номер абонента на внешней PBX
exten => _XXXX,1,NoOp(Звонок от локального sip-абонента на номера внешней PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(PJSIP/${EXTEN}@upstream_pbx,,KTWX)
; набор городского номера:
exten => _[1-7]XXXXX,1,NoOp(Звонок от локального sip-абонента через внешнюю PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(PJSIP/9${EXTEN}@upstream_pbx,,KTWX)
; набор мобильного номера:
exten => _8XXXXXXXXXX,1,NoOp(Звонок от локального sip-абонента через внешнюю PBX от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(PJSIP/9${EXTEN}@upstream_pbx,,KTWX)
{% endif %}
{% for host in groups.asterisk_server %}
	{% if host != inventory_hostname %}

;;;;;;;;;;;;;;; IAX trunk 'asterisk-{{ host }}' ;;;;;;;;;;;;;;;;;;;
[in-iax2-asterisk-{{ host }}]

; звонок из транка от 'asterisk-{{ host }}' на номера этого asterisk'а:
exten => _{{ groups.asterisk_server.index(inventory_hostname) + 1 }}XXX,1,NoOp(Входящий звонок из транка 'asterisk-{{ host }}' от ${CALLERID(all)} на ${EXTEN})
same = n,GoSub(sub-feature-busy-if-phone-in-use,s,1(${EXTEN}))
same = n,Dial(PJSIP/${EXTEN},60,ktwxU(sub-feature-record-a-call^${EXTEN}^${CALLERID(num)}^"{{ host }}"))
same = n,Hangup()
		{% if asterisk_dialplan_allow_mesh_forward_peer_to_peers == True %}
			{% for host2 in groups.asterisk_server %}
				{% if host2 != host and host2 != inventory_hostname %}

; звонок из транка от 'asterisk-{{ host }}' на номера asterisk-{{ host2 }}:
exten => _{{ loop.index }}XXX,1,NoOp(Звонок из транка asterisk-{{ host }} в транк asterisk-{{ host2 }} от ${CALLERID(all)} на ${EXTEN})
same = n,Dial(IAX2/asterisk-{{ host2 }}/${EXTEN})
same = n,Hangup()
				{% endif %}
			{% endfor %}
		{% endif %}

; ловим другие номера и выводим в лог:
exten => _X.,1,NoOp([TONULL] Входящий звонок с IAX-транка asterisk-{{ host }}: ${CALLERID(all)} на ${EXTEN})
same = n,Hangup()
	{% endif %}
{% endfor %}

;;;;;;;;;;;;;;;; User defined Functions ;;;;;;;;;;;;;;;;;;;;;;

;; Ограничение многоканальности некоторых sip-клиентов/телефонов, способной ввести в заблуждение
; вызывающего абонента, при звонке на многоканальный телефон, пользователь которого находится в процессе разговора
[sub-feature-busy-if-phone-in-use]
; аргументы: 1. вызываемый экстеншен
exten => s,1,NoOp([CHECK] Выдавать 'занято' если телефон используется (device_state:${DEVICE_STATE(PJSIP/${ARG1})}))
same = n,GotoIf($["${DEVICE_STATE(PJSIP/${ARG1})}" = "UNAVAILABLE"]?return)
same = n,GotoIf($["${DEVICE_STATE(PJSIP/${ARG1})}" = "NOT_INUSE"]?return:busy)
same = n,Busy(300)
same = n,Hangup()
same = n(return),Return()

;; Перевод позвонившего на ящик абонентской почты (если звонок совершен во время того, как вызываемый
; абонент разговаривает выдававть 'занято', для недоступных endpoint'ов тоже выдаётся 'занято'.
[sub-feature-voicemail-if-not-inuse]
; аргументы: 1. вызываемый экстеншен, 2. DIAL_STATUS
exten => s,1,NoOp(состояние аппарата: ${DEVICE_STATE(PJSIP/${ARG1})} dial status: '${ARG2}')
same = n,GotoIf($["${ARG2}" = "UNAVAILABLE"]?busy)
same = n,GotoIf($["${DEVICE_STATE(PJSIP/${ARG1})}" = "BUSY"]?busy)
same = n,GotoIf($["${DEVICE_STATE(PJSIP/${ARG1})}" = "INUSE"]?busy:voicemail)
same = n(busy),Busy(300)
same = n,Hangup()
same = n(voicemail),VoiceMail(${ARG1},u)

;; Запись разговоров (миксуются входящий и исходящий каналы)
[sub-feature-record-a-call]
; аргументы: 1. вызываемый экстеншен, 2. callerid, 3. дополнительное слово в имени файла:
exten => s,1,NoOp(Запись звонка, от:${ARG2} на:${ARG1})
same = n,Set(fname=${STRFTIME(${EPOCH},,%Y.%m.%d_%H.%M)}_${ARG3}_${ARG2}_to_${ARG1}_${UNIQUEID})
same = n,MixMonitor(${fname}.wav,W(2))
same = n,Return()

;; Получение caller'id информации из sip-заголовкой Remote-Party-ID
;
[sub-func-replace-cid-with-rpid]
; аргументы: нет
exten => s,1,NoOp(Информация из sip-заголовка: ${SIP_HEADER(Remote-Party-ID)})
same = n,Set(tmp_name=${CUT(SIP_HEADER(Remote-Party-ID),\",2)})
same = n,Set(tmp_num=${CUT(SIP_HEADER(Remote-Party-ID),\:,2)})
same = n,Set(tmp_num=${CUT(tmp_num,\@,1)})
same = n,Set(CALLERID(num)=${tmp_num})
same = n,Set(CALLERID(name)=${tmp_name})
same = n,Return()

;; Добавление кастомного sip-заголовка
;
[sub-add-sip-header]
; аргументы: 1 - какой заголовок, 2 - какое значение
exten => s,1,Set(PJSIP_HEADER(add,${ARG1})=${ARG2})
same = n,Return()
