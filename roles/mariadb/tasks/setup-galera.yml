---
# Open firewall port for Galera replication
- name: Open firewall ports for galera replication
  firewalld:
    port: "{{ item }}"
    permanent: True
    immediate: True
    state: enabled
  loop:
    - "4444/tcp"
    - "4567-4568/tcp"

# write config files to work with Galera cluster
- name: Configure /etc/my.cnf.d/server.cnf to setup cluster name
  ini_file:
    path: /etc/my.cnf.d/server.cnf
    section: mysqld
    state: present
    option: "{{ item[0] }}"
    value: "{{ item[1] }}"
  loop:
    - ['wsrep_on', 'on']
    - ['wsrep-cluster-name', '{{ galera_cluster_name }}']
    - ['wsrep_provider', '/usr/lib64/galera/libgalera_smm.so']
    - ['binlog_format', 'ROW']
    - ['wsrep_cluster_address', 'gcomm://{{ groups.db_server | join(",") }}']

# Reinitialize new cluster (if not forbidden by already working cluster)
- name: Check if there already galera cluster (file /var/lib/mysql/grastate.dat)
  stat:
    path: /var/lib/mysql/grastate.dat
  register: cluster_exists

- block:

  # task for non initial nodes in  galera cluster
  - name: Shutdown mariadb on all other nodes
    service:
      name: mariadb
      state: stopped
    when: inventory_hostname != groups.db_server[0]

  # tasks for initial galera cluster node
  - block:

    - name: Starting initializing galera cluster
      debug:
        msg: "Initialize galera-cluster on first database node '{{ groups.db_server[0] }}'"

    - name: Stop mariadb server on initial node
      service:
        name: mariadb
        state: stopped

    - name: Bootstrap first galera cluster node
      command: /usr/bin/galera_new_cluster

    when: inventory_hostname == groups.db_server[0]

  # task for other new nodes in  galera cluster
  - name: Restart mariadb on other nodes to join into the cluster
    service:
      name: mariadb
      state: restarted
    when: inventory_hostname != groups.db_server[0]

  when: galera_cluster_always_rebuild == True or cluster_exists.stat.exists == False
